//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace quiz.entities
{
    /// <summary>
    /// Class <see cref="User "/> 
    /// </summary>
    public partial class User
    {
        #region Primitive Properties
        /// <summary>
        /// User identifier
        /// </summary>
        public virtual int UserId
        {
            get;
            set;
        }
        /// <summary>
        /// User login
        /// </summary>
        public virtual string Login
        {
            get;
            set;
        }
        /// <summary>
        /// User password
        /// </summary>
        public virtual string Password
        {
            get;
            set;
        }
        /// <summary>
        /// User first Name
        /// </summary>
        public virtual string FirstName
        {
            get;
            set;
        }
        /// <summary>
        /// User last Name
        /// </summary>
        public virtual string LastName
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Answer> Answers
        {
            get
            {
                if (_answers == null)
                {
                    var newCollection = new FixupCollection<Answer>();
                    newCollection.CollectionChanged += FixupAnswers;
                    _answers = newCollection;
                }
                return _answers;
            }
            set
            {
                if (!ReferenceEquals(_answers, value))
                {
                    var previousValue = _answers as FixupCollection<Answer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAnswers;
                    }
                    _answers = value;
                    var newValue = value as FixupCollection<Answer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAnswers;
                    }
                }
            }
        }
        private ICollection<Answer> _answers;
    
        public virtual ICollection<Stat> Stats
        {
            get
            {
                if (_stats == null)
                {
                    var newCollection = new FixupCollection<Stat>();
                    newCollection.CollectionChanged += FixupStats;
                    _stats = newCollection;
                }
                return _stats;
            }
            set
            {
                if (!ReferenceEquals(_stats, value))
                {
                    var previousValue = _stats as FixupCollection<Stat>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStats;
                    }
                    _stats = value;
                    var newValue = value as FixupCollection<Stat>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStats;
                    }
                }
            }
        }
        private ICollection<Stat> _stats;

        #endregion
        #region Association Fixup
    
        private void FixupAnswers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Answer item in e.NewItems)
                {
                    if (!item.Users.Contains(this))
                    {
                        item.Users.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Answer item in e.OldItems)
                {
                    if (item.Users.Contains(this))
                    {
                        item.Users.Remove(this);
                    }
                }
            }
        }
    
        private void FixupStats(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Stat item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Stat item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }

        #endregion
    }
}
