//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace quiz.entities
{
    /// <summary>
    ///  Class <see cref="Quiz "/>  
    /// </summary>
    public partial class Quiz
    {
        #region Primitive Properties
        /// <summary>
        /// Quiz identifier
        /// </summary>
        public virtual int QuizId
        {
            get;
            set;
        }
        /// <summary>
        /// Quiz description
        /// </summary>
        public virtual string Description
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Question> Questions
        {
            get
            {
                if (_questions == null)
                {
                    var newCollection = new FixupCollection<Question>();
                    newCollection.CollectionChanged += FixupQuestions;
                    _questions = newCollection;
                }
                return _questions;
            }
            set
            {
                if (!ReferenceEquals(_questions, value))
                {
                    var previousValue = _questions as FixupCollection<Question>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupQuestions;
                    }
                    _questions = value;
                    var newValue = value as FixupCollection<Question>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupQuestions;
                    }
                }
            }
        }
        private ICollection<Question> _questions;
    
        public virtual ICollection<Stat> Stats
        {
            get
            {
                if (_stats == null)
                {
                    var newCollection = new FixupCollection<Stat>();
                    newCollection.CollectionChanged += FixupStats;
                    _stats = newCollection;
                }
                return _stats;
            }
            set
            {
                if (!ReferenceEquals(_stats, value))
                {
                    var previousValue = _stats as FixupCollection<Stat>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStats;
                    }
                    _stats = value;
                    var newValue = value as FixupCollection<Stat>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStats;
                    }
                }
            }
        }
        private ICollection<Stat> _stats;

        #endregion
        #region Association Fixup
    
        private void FixupQuestions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Question item in e.NewItems)
                {
                    item.Quiz = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Question item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quiz, this))
                    {
                        item.Quiz = null;
                    }
                }
            }
        }
    
        private void FixupStats(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Stat item in e.NewItems)
                {
                    item.Quiz = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Stat item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quiz, this))
                    {
                        item.Quiz = null;
                    }
                }
            }
        }

        #endregion
    }
}
