//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace quiz.entities
{
    /// <summary>
    ///  Class <see cref="Question"/> 
    /// </summary>
    public partial class Question
    {
        #region Primitive Properties
        /// <summary>
        /// Question identifier
        /// </summary>
        public virtual int QuestionId
        {
            get;
            set;
        }
        /// <summary>
        /// Question description
        /// </summary>
        public virtual string Description
        {
            get;
            set;
        }
        /// <summary>
        /// Quiz identifier
        /// </summary>
        public virtual int QuizId
        {
            get { return _quizId; }
            set
            {
                if (_quizId != value)
                {
                    if (Quiz != null && Quiz.QuizId != value)
                    {
                        Quiz = null;
                    }
                    _quizId = value;
                }
            }
        }
        private int _quizId;

        #endregion
        #region Navigation Properties
    
        public virtual Quiz Quiz
        {
            get { return _quiz; }
            set
            {
                if (!ReferenceEquals(_quiz, value))
                {
                    var previousValue = _quiz;
                    _quiz = value;
                    FixupQuiz(previousValue);
                }
            }
        }
        private Quiz _quiz;
    
        public virtual ICollection<Answer> Answers
        {
            get
            {
                if (_answers == null)
                {
                    var newCollection = new FixupCollection<Answer>();
                    newCollection.CollectionChanged += FixupAnswers;
                    _answers = newCollection;
                }
                return _answers;
            }
            set
            {
                if (!ReferenceEquals(_answers, value))
                {
                    var previousValue = _answers as FixupCollection<Answer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAnswers;
                    }
                    _answers = value;
                    var newValue = value as FixupCollection<Answer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAnswers;
                    }
                }
            }
        }
        private ICollection<Answer> _answers;

        #endregion
        #region Association Fixup
    
        private void FixupQuiz(Quiz previousValue)
        {
            if (previousValue != null && previousValue.Questions.Contains(this))
            {
                previousValue.Questions.Remove(this);
            }
    
            if (Quiz != null)
            {
                if (!Quiz.Questions.Contains(this))
                {
                    Quiz.Questions.Add(this);
                }
                if (QuizId != Quiz.QuizId)
                {
                    QuizId = Quiz.QuizId;
                }
            }
        }
    
        private void FixupAnswers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Answer item in e.NewItems)
                {
                    item.Question = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Answer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Question, this))
                    {
                        item.Question = null;
                    }
                }
            }
        }

        #endregion
    }
}
