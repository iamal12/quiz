//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace quiz.entities
{
    /// <summary>
    ///  Class <see cref="Answer "/> 
    /// </summary>
    public partial class Answer
    {
        #region Primitive Properties
        /// <summary>
        /// Answer identifier
        /// </summary>
        public virtual int AnswerId
        {
            get;
            set;
        }
        /// <summary>
        /// Answer description
        /// </summary>
        public virtual string Description
        {
            get;
            set;
        }
        /// <summary>
        /// The answer is correct or not
        /// </summary>
        public  bool IsCorrect
        {
            get;
            set;
        }
        /// <summary>
        /// Message (correct answer/your answer)
        /// </summary>
        public  string Message
        {
            get;
            set;
        }
        /// <summary>
        /// The user answer is correct or not
        /// </summary>
        public virtual bool IsUserCorrect
        {
            get;
            set;
        }
        /// <summary>
        /// Question identifier
        /// </summary>
        public virtual int QuestionId
        {
            get { return _questionId; }
            set
            {
                if (_questionId != value)
                {
                    if (Question != null && Question.QuestionId != value)
                    {
                        Question = null;
                    }
                    _questionId = value;
                }
            }
        }
        private int _questionId;
        /// <summary>
        /// User identifier
        /// </summary>
        public virtual Nullable<int> UserId
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Question Question
        {
            get { return _question; }
            set
            {
                if (!ReferenceEquals(_question, value))
                {
                    var previousValue = _question;
                    _question = value;
                    FixupQuestion(previousValue);
                }
            }
        }
        private Question _question;
    
        public virtual ICollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers;
                    _users = newCollection;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers;
                    }
                }
            }
        }
        private ICollection<User> _users;

        #endregion
        #region Association Fixup
    
        private void FixupQuestion(Question previousValue)
        {
            if (previousValue != null && previousValue.Answers.Contains(this))
            {
                previousValue.Answers.Remove(this);
            }
    
            if (Question != null)
            {
                if (!Question.Answers.Contains(this))
                {
                    Question.Answers.Add(this);
                }
                if (QuestionId != Question.QuestionId)
                {
                    QuestionId = Question.QuestionId;
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.Answers.Contains(this))
                    {
                        item.Answers.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.Answers.Contains(this))
                    {
                        item.Answers.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
